import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { validate } from 'class-validator';
import { AuthService } from '../auth.service';
import { SignInDto } from '@/modules/auth/DTOs/sign-in.dto';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  private readonly logger = new Logger(LocalStrategy.name);

  constructor(private readonly authService: AuthService) {
    super({
      usernameField: 'emailOrUsername', // T√™n tr∆∞·ªùng ng∆∞·ªùi d√πng g·ª≠i l√™n
      passwordField: 'password', // T√™n tr∆∞·ªùng m·∫≠t kh·∫©u
    });
  }

  /**
   * H√†m validate ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông b·ªüi Passport sau khi nh·∫≠n th√¥ng tin ƒëƒÉng nh·∫≠p.
   * D√πng ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o v√† x√°c th·ª±c ng∆∞·ªùi d√πng.
   *
   * @param emailOrUsername - Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p do ng∆∞·ªùi d√πng cung c·∫•p
   * @param password - M·∫≠t kh·∫©u do ng∆∞·ªùi d√πng cung c·∫•p
   * @returns Th√¥ng tin ng∆∞·ªùi d√πng n·∫øu x√°c th·ª±c th√†nh c√¥ng
   * @throws BadRequestException n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
   * @throws UnauthorizedException n·∫øu x√°c th·ª±c th·∫•t b·∫°i
   */
  async validate(emailOrUsername: string, password: string): Promise<any> {
    this.logger.log(`üîê ƒêang x√°c th·ª±c ng∆∞·ªùi d√πng: ${emailOrUsername}`);

    // B∆∞·ªõc 1: T·∫°o DTO t·ª´ d·ªØ li·ªáu ƒëƒÉng nh·∫≠p
    const credentials = new SignInDto();
    credentials.emailOrUsername = emailOrUsername;
    credentials.password = password;

    // B∆∞·ªõc 2: Validate d·ªØ li·ªáu ƒë·∫ßu v√†o theo DTO
    const errors = await validate(credentials);
    if (errors.length > 0) {
      const errorMessages = errors
        .flatMap((error) =>
          error.constraints
            ? Object.values(error.constraints)
            : ['L·ªói kh√¥ng x√°c ƒë·ªãnh'],
        )
        .join(', ');

      this.logger.warn(`‚ö†Ô∏è L·ªói validate: ${errorMessages}`);
      throw new BadRequestException(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errorMessages}`);
    }

    // B∆∞·ªõc 3: G·ªçi AuthService ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng
    const user = await this.authService.validateUser(credentials);
    if (!user) {
      this.logger.warn(`üö´ X√°c th·ª±c th·∫•t b·∫°i: ${emailOrUsername}`);
      throw new UnauthorizedException(
        'Email/T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.',
      );
    }

    this.logger.log(`‚úÖ X√°c th·ª±c th√†nh c√¥ng: ${emailOrUsername}`);
    return user;
  }
}
